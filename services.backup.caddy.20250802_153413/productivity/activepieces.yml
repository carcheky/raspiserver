services:
  activepieces:
    image: ghcr.io/activepieces/activepieces:latest
    container_name: activepieces
    restart: unless-stopped
    # Enable the following line if you already use AP_EXECUTION_MODE with SANDBOXED or old activepieces, checking the breaking change documentation for more info.
    privileged: true
    ports:
      - '${ACTIVEPIECES_PORT:-5680}:80'
    depends_on:
      - postgres
      - redis
    environment:
      # RaspiServer reverse proxy configuration
      - RASPISERVER_ENABLE=true
      - RASPISERVER_SUBDOMAIN=activepieces
      - RASPISERVER_PORT=8080
      - RASPISERVER_PROTOCOL=http
      - RASPISERVER_WEBSOCKET=false
      - RASPISERVER_MAX_BODY_SIZE=100M
      - TZ=${TIMEZONE}
      - AP_POSTGRES_DATABASE=${AP_POSTGRES_DATABASE}
      - AP_POSTGRES_PASSWORD=${AP_POSTGRES_PASSWORD}
      - AP_POSTGRES_USERNAME=${AP_POSTGRES_USERNAME}
      - AP_POSTGRES_HOST=postgres
      - AP_REDIS_HOST=redis
      - AP_FRONTEND_URL=${AP_FRONTEND_URL:-http://localhost:5680}
      - AP_WEBHOOK_TIMEOUT_SECONDS=${AP_WEBHOOK_TIMEOUT_SECONDS:-30}
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "raspiserver.category=automation-workflows"
      - "raspiserver.description=No-code automation platform for business workflows"

  postgres:
    image: 'postgres:14.4'
    container_name: activepieces_postgres
    restart: unless-stopped
    environment:
      # RaspiServer reverse proxy configuration
      - RASPISERVER_ENABLE=true
      - RASPISERVER_SUBDOMAIN=activepieces
      - RASPISERVER_PORT=8080
      - RASPISERVER_PROTOCOL=http
      - RASPISERVER_WEBSOCKET=false
      - RASPISERVER_MAX_BODY_SIZE=100M
      - TZ=${TIMEZONE}
      - POSTGRES_DB=${AP_POSTGRES_DATABASE}
      - POSTGRES_PASSWORD=${AP_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AP_POSTGRES_USERNAME}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    volumes:
      - ${VOLUMES_DIR}/activepieces-postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AP_POSTGRES_USERNAME} -d ${AP_POSTGRES_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "raspiserver.category=database"
      - "raspiserver.description=PostgreSQL database for Activepieces"

  redis:
    image: 'redis:7.0.7'
    container_name: activepieces_redis
    restart: unless-stopped
    environment:
      # RaspiServer reverse proxy configuration
      - RASPISERVER_ENABLE=true
      - RASPISERVER_SUBDOMAIN=activepieces
      - RASPISERVER_PORT=8080
      - RASPISERVER_PROTOCOL=http
      - RASPISERVER_WEBSOCKET=false
      - RASPISERVER_MAX_BODY_SIZE=100M
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_DIR}/activepieces-redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "raspiserver.category=cache"
      - "raspiserver.description=Redis cache for Activepieces"
