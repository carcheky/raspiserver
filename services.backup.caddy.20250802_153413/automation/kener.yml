services:
  uptime-kener:
    image: rajnandan1/kener:latest      # Change to 'rajnandan1/kener:alpine' for an even smaller image! üòÅüöÄ
    container_name: uptime-kener
    restart: unless-stopped
    # env_file: custom.env              # Uncomment this if you are needing to export environment variables from a custom environment file. By default, Docker will import any variables that exist in `.env`
    environment:
      # RaspiServer reverse proxy configuration
      - RASPISERVER_ENABLE=true
      - RASPISERVER_SUBDOMAIN=kener
      - RASPISERVER_PORT=8080
      - RASPISERVER_PROTOCOL=http
      - RASPISERVER_WEBSOCKET=false
      - RASPISERVER_MAX_BODY_SIZE=100M
      TZ: ${TIMEZONE}
      KENER_SECRET_KEY: ${KENER_SECRET_KEY}   # Keep private!! - best to define in `.env` file or through Docker Secret
      ORIGIN: ${KENER_ORIGIN}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${KENER_PORT:-3000}
      KENER_BASE_PATH: ${KENER_BASE_PATH:-}
      # DATABASE_URL: custom_db_url     # By default, a SQLite database is used - you may override the database url/type here
      # RESEND_API_KEY: ${RESEND_API_KEY:-}
      # RESEND_SENDER_EMAIL: ${RESEND_SENDER_EMAIL:-}

      ### You most likely will NOT need to change anything below this line. Be sure you know what you're doing!! (https://kener.ing/docs/deployment/#docker-environment-variables)

      # PORT: 3000                      # Port that app listens on in the container
      # KENER_BASE_PATH:                # By default, Kener runs at `/`. You may change this to be, e.g. `/status`, etc. Do NOT add a trailing slash!! (more info here: https://kener.ing/docs/deployment/#docker-environment-variables)
      # ORIGIN: http://localhost:3000
      # NODE_ENV: production            # This is already set to "production" by default within the container
    ports:
      - '${KENER_PUBLIC_PORT:-3002}:3000/tcp'
    volumes:
      - ${VOLUMES_DIR}/kener-data:/app/database              # We suggest using a Docker named volume, which is more performant for databases
      - ${VOLUMES_DIR}/kener-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # read_only: true                   # Uncommenting this fortifies security by marking the container's filesystem as read-only (aka no data can be written to the container's filesystem except for explicitly defined writable volumes and bind mounts, an exception has already been defined for `/database` and `/uploads`)
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "raspiserver.category=status-monitoring"
      - "raspiserver.description=Modern status page and uptime monitoring"
    # depends_on:                       #  <-- Uncomment if you would like to use PostgreSQL or MySQL
    #   - postgres                      #       ...instead of SQLite
    #   - mysql                         #